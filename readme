To enable flexible data exploration for the user, we designed and developed a desktop visualization app that allow user to explore tweets and news related to longcovid and longhaulers based on the input’s selection provided by the user.
 
Our target audience is people who still experiencing longcovid symptoms and want to see what people are talking and sharing about it on the social media. For this purpose, we introduce a desktop visualization app that has two tabs, one for symptom tracking where user selects the symptoms from the dropdown menu and see the corresponding tweets and the important links posted by the people on social media, other tab for news tracking where user track the news based on the keyword selected.
 
 
User Interface and Interaction Design.
 
We aim to create a visualization application that serves the purpose of Symptom tracking as well as the News tracking. For this, we created two tabs named Symptom Tracking and LongCovid News Tracking for each component with similar design.
 
Symptom Tracking Tab
 
To make the application more interactive and visualization simpler to the user we have split the page into 3 parts as indicated in fig 1

 
Fig 1
 
Control Panel – This the input area where user select the input and see the output on the right side. Control panel consist of mainly 5 components – ‘Select Symptom’ a multiselect dropdown which has 25 most common symptoms of longcovid, rest all the other symptoms are put in ‘select Secondary Symptoms’ dropdown. ‘Select Date’ allow user to filter the tweets for a particular date range while ‘Submit’ and ‘Reset’ button is used to submit the input and clear the input respectively.
 
Symptom Tracking panel – This is the output panel where user see a scatter plot with date represented at x-axis and time represented as y-axis. Every dot in scatter plot represents a tweet and hovering over the dot show the content of tweet as shown in fig 2. In addition, clicking on any dot with a link open a window which gives user an option to visit the link as shown in fig 3.
 
 
 

 
Link Panel – To make links easily accessible to the user, we designed a Link panel where all the links in the posted based on the input range selected by user appears. User can visit the link in a different tab while keeping the current state of the chart.
 
 
 
 
 
Long covid New Tracking Tab
 
Like ‘symptom Tracking’ tab we also divided News tracking tab in 3 sections – Control panel, News Tracking and Links section as shown in figure 4.
 
 
 

 
Control Panel – Similar to control panel in symptom tracking tab this also has five components. Two dropdowns to select most common and least common keywords. ‘Date range’, ‘Submit’ and ‘Reset’ button works as they do in other control panel.
 
News Tracking panel – This is the output panel where user see a scatter plot with date represented at x-axis and time represented as y-axis. Every dot in scatter plot represents a tweet and hovering over the dot show the content of news as shown in fig 5. In addition, clicking on any dot with a link open a window which gives user an option to visit the link as shown in fig 6.
 
 

 
 
Link Panel – While reading the news most of the user prefer to read from different news source.  To make that easily accessible to the user, we designed a Link panel where all the links are displayed which are retrieved from data set based input provided by user. User can visit the link in a different tab while keeping the current state of the chart and come back to main tab to access the other link.
 
 
 Technical design and Implementation

The web based visualization application was developed using Dash by Plotly in Python. Most of the code is written in Jupyter notebooks and we have used a free version of Heroku server to host the application on the server. The data for the visualization consists of a collection of CSV files which has cleaned tweets along with Date and Time columns. Code is designed to work with any datafiles configured in specified format, just by replacing old data with the new data. Moreover, App is designed to support multi-platform usage. 



In this section we will discuss technical design and implementation of App and data flow from different layers. User provides input through the control panel in the App. Input keywords are then sent as a request to the data file where keywords are searched based on business logics. Once it finds the matching records are sent back as a response and then it is displayed as a scatter plot char on the User interface.



![Alt Text](DesktopApp.png)


